//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameResources/InputSystemControls/AndroidActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AndroidActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AndroidActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AndroidActions"",
    ""maps"": [
        {
            ""name"": ""AndroidMap"",
            ""id"": ""f027fc9d-30b5-4032-95c6-c372f98fc93b"",
            ""actions"": [
                {
                    ""name"": ""LeftStick"",
                    ""type"": ""Value"",
                    ""id"": ""5912ac39-7417-4395-8a3a-36d4f4cd5dcc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""38d7880c-377c-495d-ae44-b760edf39c68"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""AndroidSheme"",
                    ""action"": ""LeftStick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""AndroidSheme"",
            ""bindingGroup"": ""AndroidSheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<AndroidJoystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // AndroidMap
        m_AndroidMap = asset.FindActionMap("AndroidMap", throwIfNotFound: true);
        m_AndroidMap_LeftStick = m_AndroidMap.FindAction("LeftStick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AndroidMap
    private readonly InputActionMap m_AndroidMap;
    private IAndroidMapActions m_AndroidMapActionsCallbackInterface;
    private readonly InputAction m_AndroidMap_LeftStick;
    public struct AndroidMapActions
    {
        private @AndroidActions m_Wrapper;
        public AndroidMapActions(@AndroidActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftStick => m_Wrapper.m_AndroidMap_LeftStick;
        public InputActionMap Get() { return m_Wrapper.m_AndroidMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AndroidMapActions set) { return set.Get(); }
        public void SetCallbacks(IAndroidMapActions instance)
        {
            if (m_Wrapper.m_AndroidMapActionsCallbackInterface != null)
            {
                @LeftStick.started -= m_Wrapper.m_AndroidMapActionsCallbackInterface.OnLeftStick;
                @LeftStick.performed -= m_Wrapper.m_AndroidMapActionsCallbackInterface.OnLeftStick;
                @LeftStick.canceled -= m_Wrapper.m_AndroidMapActionsCallbackInterface.OnLeftStick;
            }
            m_Wrapper.m_AndroidMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftStick.started += instance.OnLeftStick;
                @LeftStick.performed += instance.OnLeftStick;
                @LeftStick.canceled += instance.OnLeftStick;
            }
        }
    }
    public AndroidMapActions @AndroidMap => new AndroidMapActions(this);
    private int m_AndroidShemeSchemeIndex = -1;
    public InputControlScheme AndroidShemeScheme
    {
        get
        {
            if (m_AndroidShemeSchemeIndex == -1) m_AndroidShemeSchemeIndex = asset.FindControlSchemeIndex("AndroidSheme");
            return asset.controlSchemes[m_AndroidShemeSchemeIndex];
        }
    }
    public interface IAndroidMapActions
    {
        void OnLeftStick(InputAction.CallbackContext context);
    }
}
